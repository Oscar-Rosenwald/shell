#!/bin/bash

set -euo pipefail
IFS=$'\n\t'
CYAN='\033[0;36m'
NC='\033[0m'

function printHelp {
	cat<<EOF
$0 [OPT: node|file|cc-name] [OPT: component] [ANY_ORDER: -run|-file|-cc] [ANY_ORDER: -l] [ANY_RODER: --map|-m <vms-name> | --no-map ] [REST]
$0 [-h | --help ]

Filter logs from a CC in various forms.

Arguments OPT are optional, but must be given in the above order.
Arguments ANY_ORDER may be given in any order anywhere.
Arguments REST must be given last.

OPT #1: Node identifier. Could be:
  - Number (assuming run_cluster is used)
  - File name (when logs were downloaded)
  - CC name that you'd pass to cc-action.sh
Default is 2.

OPT #2: Component name. Default is mgmt.

ANY_ORDER #1: Specifies what mode to run in.
  - run  = use run cluster files
  - file = use any file
  - cc   = use cc-action.sh in the logs mode
Default is run, but depending on OPT #1 the mode will be inferred.

ANY_ORDER #2: If mode is 'file', pipe output to less -S. Default is false.

ANY_ORDER #3:
  - map    = Point to file which contains the mappings between IDs and names of the VMS.
             Enabled by default in run mode with initial value $MAPS/ha.
             In cc mode, we use the VMS name if known and --map is not given.
  - no-map = Inhibit the automatic VMS name usage in cc mode.

REST: Arguments to pass to some of the above modes.
EOF
}

# Args in order
node=
component=

# Never passed as command line arguments
grep=
nogrep=

# Args in any order

# Options:
#   - run_cluster = Watches ~/cluster files
#   - file        = filters content of a file
#   - cc 		  = filter on remote CC log
whatToDo=run_cluster
less='' # Empty or 'less -S'
mapFile=
declare -A mappings

debug=

while true; do
	if [[ $# -eq 0 ]]; then
		break
	fi
	
	opt=$1

	if [[ $opt = -h ]] || [[ $opt = --help ]]; then
		printHelp
		exit 0
	fi

	if [[ $opt = --debug ]]; then
		debug=--debug
		shift
		continue
	fi

	if [[ $opt = -run ]]; then
		whatToDo=run_cluster
		shift
		continue
	elif [[ $opt = -file ]]; then
		whatToDo=file
		shift
		continue
	elif [[ $opt = -cc ]]; then
		whatToDo=cc
		shift
		continue
	elif [[ $opt = -l ]]; then
		less='less -S'
		shift
		continue
	elif [[ $opt = --map ]]; then
		mapFile=$2
		shift 2
		continue
	elif [[ $opt = --no-map ]]; then
		mapFile=
		shift
		continue
	fi

	[[ -z $node ]]      && node=$opt    && shift && continue
	[[ -z $component ]] && component=$opt && shift && continue

	if [[ ! -z $node ]] && [[ ! -z $component ]]; then
		break
	fi
done

[[ $debug = --debug ]] && set -x
[[ -z $node ]] && node=2
[[ -z $component ]] && component=mgmt

# If node is a file, disregard whatToDo and enter file mode.
# 
# It is likely that component won't be set if node is a file.
# Use the filename to determina what the component is.
if [[ -f $node ]]; then
	whatToDo=file
	component=$(basename $node)
	component=${component/.txt/}
elif [[ ! $node =~ ^[0-9]+$ ]]; then
	whatToDo=cc
fi

case ${component} in
	mgmt)
		grep='-E "(haservice|db_resiliency_service|mgmt_mode_normal.go|recovery|Commit)"'
		nogrep='-E "(Register connection|norm)"'
		;;
	db|postgres)
		grep='-E "(Commit|db/|LOG|postgres|started streaming WAL)"'
		nogrep='-E "(cleanup|ha-remote|db_utils.go.\*Setting|database.\*does not exist)"'
		;;
esac

# Args:
#   - 1 = base command
function __genericCCLog {
	cmd="$@"
	
	if [[ ! -z $nogrep ]]; then
		cmd+=" | grep --line-buffered -iav $nogrep"
	fi

	if [[ ! -z $grep ]]; then
		cmd+=" | grep --color=always -a --line-buffered $grep"
	fi

	if [[ ! -z $mapFile ]]; then
		cmd+=" | map-IDs.sh $mapFile"
	fi

	echocolour "$cmd"
	eval "$cmd" 
}

function runClusterLog {
	mapFile=ha
	__genericCCLog "clusterLog $node $component"
}

function ccLog {
	vmsName=$(get-cc-spec.sh -c $node --get-vms $debug)
	if [[ ! -z $vmsName ]] && [[ -z $mapFile ]]; then
		mapFile=$vmsName
	fi

	__genericCCLog "cc-action.sh $node --no-map -n $component $@"
}

function fileLog {
	if [[ ! -z $nogrep ]]; then
		cmd="grep -a -vi $nogrep '$node'"

		if [[ ! -z $grep ]]; then
			cmd+=" | grep -a $grep"
		fi

		if [[ -z $less ]]; then
			cmd+=" --color=always | tail -n 100"
		else
			cmd+=" | less -rS "
		fi
	else
		# Either nogrep or grep must be set, so no need to check if '-z $grep' here.
		cmd="logs '$node' --no-tail"

		if [[ ! -z $grep ]]; then
			cmd+=" | grep -a -i --color=always $grep"
		fi

		if [[ -z $less ]]; then
			cmd+=" | tail -n 100"
		else
			cmd+=' | less -S -r'
		fi
	fi

	if [[ ! -z $mapFile ]]; then
		cmd+=" | map-IDs.sh $mapFile"
	fi

	echocolour "$cmd"
	eval "$cmd"
}

case $whatToDo in
	run_cluster)
		runClusterLog
		;;
	file)
		fileLog "$@"
		;;
	cc)
		ccLog "$@"
		;;
	*)
		printHelp
		exit 0
esac