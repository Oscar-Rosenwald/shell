#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

cd $VAION_PATH

function show_help() {
cat <<EOF
Usage: test [-h --help]
            <test-path-like-regular-people-use> [args] [-- [bazel-test-args]]
Runs a unit test using bazel test. First argument must be a path to a directory.

-h, --help              Display this help.
 r, --runs <num>        runs per test (default 1)
 j, --jobs <num>        jobs (default 1)
 f, --filter <name>     filter (when starting with '/', the filter is assumed to replace the path after the core test, which does not need to be given again)
 o, --output <output>   test output (default 'errors')
 t, --timeout <time>    test timeout
 R, --race              run with race detection
 a, --all, --no-filter  override filter and run all; used to retain the filter if needed later
 --recursive            run all tests under the directory
 --                     other arguments passed to 'bazel test'
EOF
}

function findDir {
	givenDir=$1
	find go cloud camera api -type d -path "*$givenDir"
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	show_help
	exit 0
fi

# Test if test target is valid

testDir="$1"
# Remove trailing slash
if [[ "${testDir:(-1)}" = "/" ]]; then
	testDir=${testDir::-1}
fi
# Remove potential (copied) appendix
if [[ "$testDir" =~ .*:go_default_test ]]; then
	testDir=${testDir::-16}
fi
# Remove leading double-slash
if [[ "${testDir::1}" = "/" ]]; then
	testDir=${testDir:1}
fi
# Twice because we could have one or two of them
if [[ "${testDir::1}" = "/" ]]; then
	testDir=${testDir:1}
fi
# Check directory exists
if [[ ! -d "$testDir" ]]; then
	echocolour "Directory may not exist. Trying to find it..."
	testDir=$(findDir $testDir)

	if [[ -z "$testDir" ]]; then
		echocolour "Wrong test directory! No directory '$testDir' exist."
		echo
		show_help
		exit 1
	fi
fi
	
runsPerTest=1
jobs=1
coreTest=""
filter=""
race=""
output="errors"
recursive=false
timeout=90 # In seconds
shift

# Handle options
while [[ "$#" -gt "0" ]]; do
	opt="$1"
	shift # Only shift by 1 in case 'val' isn't valid (like with the 'race' option)
	case "$opt" in
		r)
			runsPerTest="$1"
			shift
			;;
		j)
			jobs="$1"
			shift
			;;
		f)
			if [[ ! "$1" =~ ^/.* ]]; then
				coreTest=`echo "$1" | cut -f 1 -d /`
				filter=`echo "$1" | sed "s/$coreTest//"`
			elif [[ -z $coreTest ]]; then
				echo "No core test name was given (filter starts with /)"
				show_help
				exit 1
			else
				filter="$1" # Starts with / - reuse core filter
			fi
			shift
			;;
		o)
			output="$1"
			shift
			;;
		t|--timeout)
			timeout="$1"
			shift
			;;
		a|--no-filter|--all)
			filter=""
			coreTest=""
			;;
		R)
			race="_race"
			;;
		-h)
			show_help
			exit 0
			;;
		--recursive)
			recursive=true
			;;
		--)
			break
			;;
		*)
			echo "Invalid option '$opt'."
			echo
			show_help
			exit 1
	esac
done

if [[ $recursive = true ]]; then
	testDir=$testDir/...
else
	testDir="$testDir:go_default_test"
fi

command="TEST_TARGETS=//$testDir EXTRA_TEST_OPTIONS='--test_filter=$coreTest$filter --runs_per_test=$runsPerTest --jobs=$jobs --test_output=$output --test_timeout=$timeout $@' make main_test$race"

echocolour "$command"
eval $command