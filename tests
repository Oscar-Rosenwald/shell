#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

function show_help() {
cat <<EOF
Usage: test [-h --help]
            <test-path-like-regular-people-use> [args] [-- [bazel-test-args]]
Runs a unit test using bazel test. First argument must be a path to a directory.

-h, --help              Display this help.
 r, --runs <num>        runs per test (default 1)
 j, --jobs <num>        jobs (default 1)
 f, --filter <name>     filter
 o, --output <output>   test output (default 'errors')
 t, --timeout <time>    test timeout
 R, --race              run with race detection
 a, --all, --no-filter  override filter and run all; used to retain the filter if needed later
 --recursive            run all tests under the directory
 --                     other arguments passed to 'bazel test'

'a' overrides all 'f's, if no 'a' is given, the last f is applied as the filter.
EOF
}

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	show_help
	exit 0
fi

# Test if test target is valid

testDir="$1"
# Remove trailing slash
if [[ "${testDir:(-1)}" = "/" ]]; then
	testDir=${testDir::-1}
fi
# Remove potential (copied) appendix
if [[ "$testDir" =~ .*:go_default_test ]]; then
	testDir=${testDir::-16}
fi
# Remove leading double-slash
if [[ "${testDir::1}" = "/" ]]; then
	testDir=${testDir:1}
fi
# Twice because we could have one or two of them
if [[ "${testDir::1}" = "/" ]]; then
	testDir=${testDir:1}
fi
# Check directory exists
if [[ ! -d "$testDir" ]]; then
	echocolour "Wrong test directory! No directory '$testDir' exist."
	echo
	show_help
	exit 1
fi
	
runsPerTest=1
jobs=1
filter=""
race=""
output="errors"
noFilter=false
recursive=false
timeout=90 # In seconds
shift

# Handle options
while [[ "$#" -gt "0" ]]; do
	opt="$1"
	shift # Only shift by 1 in case 'val' isn't valid (like with the 'race' option)
	case "$opt" in
		r)
			runsPerTest="$1"
			shift
			;;
		j)
			jobs="$1"
			shift
			;;
		f)
			filter="$1"
			shift
			;;
		o)
			output="$1"
			shift
			;;
		t|--timeout)
			timeout="$1"
			shift
			;;
		a|--no-filter|--all)
			noFilter=true
			;;
		R)
			race="_race"
			;;
		-h)
			show_help
			exit 0
			;;
		--recursive)
			recursive=true
			;;
		--)
			break
			;;
		*)
			echo "Invalid option $opt."
			echo
			show_help
			exit 1
	esac
done

if [[ $noFilter = true ]]; then
	filter=""
fi
if [[ $recursive = true ]]; then
	testDir=$testDir/...
else
	testDir="$testDir:go_default_test"
fi

command="TEST_TARGETS=//$testDir EXTRA_TEST_OPTIONS='--test_filter=$filter --runs_per_test=$runsPerTest --jobs=$jobs --test_output=$output --test_timeout=$timeout $@' make main_test$race"

echocolour "$command"
eval $command