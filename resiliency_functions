#!/bin/bash

# This file defines commonly used functions for manipulating high availability run_cluster tests.
# It expects to run run_cluster in a hybrid mode with at least 3 nodes in the secondary server group.
# If you use run, then 3 nodes will be used.
#
# It is assumed that there exist two directories in ~/ which hold pre-build configurations
# of run_cluster so we do not have to rebuild them every time, which is tedious and racy. The directories
# are:
clean_cluster=~/cluster_CLEAN.bk # holds a clean build with no HA enabled.
ha_cluster=~/cluster_HA.bk       # holds a build with high availability already enabled.

function get {
	curl http://localhost:8080/api/v1/serverGroups | jq '.[].id'
}

function setha {
	for node in 2 3 4; do
		port=$((5432 + ($node - 1) * 4))
		docker exec postgres_$node psql -U postgres -p $port -d vaionmgmt -c "update server_groups set highly_available = true where primary_site = false;"
	done
}

function unsetha {
	for node in 2 3 4; do
		port=$((5432 + ($node - 1) * 4))
		docker exec postgres_$node psql -U postgres -p $port -d vaionmgmt -c "update server_groups set highly_available = false;"
	done
}

function sethaapi {
	id=$(curl http://localhost:8080/api/v1/serverGroups | jq '.[].id' | tail -n 1 | sed 's/"//g')
	echo
	echo $id
	curl http://localhost:8080/api/v1/serverGroups/$id -v -X PUT -d '{"highly_available":true}'
}

function unsethaapi {
	id=$(curl http://localhost:8080/api/v1/serverGroups | jq '.[].id' | tail -n 1 | sed 's/"//g')
	echo
	echo $id
	curl http://localhost:8080/api/v1/serverGroups/$id -v -X PUT -d '{"highly_available":false}'
}

function db {
	container="${1:-2}"
	port=$((5432 + ($container - 1) * 4))

	if [[ ! -z ${2:-} ]]; then
		port=$(($port + 1))
		echocolour "Entering replica DB of postgres_$container on port $port"
	else
		echocolour "Entering local DB of postgres_$container on port $port"
	fi
	
	docker exec -it postgres_$container psql -U postgres -d vaionmgmt -p $port
}

function sh {
	docker exec -it postgres_$1 bash
}

function run {
	# Arg 1:
	#   - clean = start from scratch
	#   - old   = restart existing cluster
	#   - ready = run cluster with HA enabled

	target="${1:-clean}"
	src=$clean_cluster
	if [[ $target = ready ]]; then
		src=$ha_cluster
	fi

	runCluster=$VAION_PATH/scripts/run_cluster
	
	if [[ ! -d $src ]] || [[ $target = new ]]; then
		echocolour "Creating new cluster"
		sudo rm -rf ~/cluster
		$runCluster --hybrid 3 -r
	elif [[ $target = old ]]; then
		echocolour "Restarting old cluster"
		$runCluster --hybrid 3
	else
		echocolour "Running existing cluster in $target mode"
		sudo rm -rf ~/cluster && sudo cp -ar $src ~/cluster
		$runCluster --hybrid 3
	fi
}

# Default is the second node, asthat is where we want the dists replicated from.
function insertDisk {
	container="${1:-2}"
	port=$((5432 + ($container - 1) * 4))
	diskId="${2:-1}"
	
	docker exec postgres_$container psql -U postgres -d vaionmgmt -p $port -c "INSERT INTO disks (serial, name, size, present) VALUES ('$diskId','$diskId',1, true);"
}

# Default is the 3rd node, as that is where we want the disks replicated to.
function getDisks {
	container="${1:-3}"
	port=$((5432 + ($container - 1) * 4 + 1))
	echocolour "Getting all disks from container postgres_$container on port $port"
	
	docker exec postgres_$container psql -U postgres -d vaionmgmt -p $port -c "SELECT serial, name FROM disks;"
}

# Call this like:
#    eval $(watchha 3 mgmt)
function watchha {
	node="${1:-2}"
	component="${2:-mgmt}"

	if [[ "$component" == "mgmt" ]]; then
		grep='-E "(haservice|db_resiliency_service|mgmt_mode_normal.go)"'
	elif [[ "$component" == "db" ]]; then
		node="$node postgres"
		grep='-vi cleanup'
	fi

	echo "cluster_log $node | grep --color=always $grep"
}

function diskName {
	cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w 10000 | head -n 1
}

function testWalOverflow {
	# Arg 1: Standby node to stop. Default 3.
	# Arg 2: OPTIONAL Master node. Default 2.

	standby="${1:-3}"
	master="${2:-2}"
	port=$((5432 + 4)) # Port of the master's local database

	insertDisk
	docker pause postgres_$standby

	for i in {1..100}; do
		docker exec postgres_$master psql -U postgres -d vaionmgmt -p $port -c "UPDATE disks SET name = '"$(eval $diskName)"' where serial = '1';"
	done

	docker restart postgres_$standby
}